#!/usr/bin/env bash
set -xe
export kubernetes_minor_version=${kubernetes_minor_version}
export kubernetes_community_ami_version=${kubernetes_community_ami_version}
# containerd https://kubernetes.io/docs/setup/production-environment/container-runtimes/
sudo modprobe overlay
sudo modprobe br_netfilter
cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
overlay
br_netfilter
EOF
cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF
sudo sysctl --system
# https://docs.docker.com/engine/install/ubuntu/
apt-get -y install \
    apt-transport-https \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
echo \
  "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
apt-get update
apt-get install -y containerd.io=1.4.4-1
mkdir -p /etc/containerd
containerd config default | sudo tee /etc/containerd/config.toml
sed -i 's/          \[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]/          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]\n            SystemdCgroup = true/' /etc/containerd/config.toml
systemctl restart containerd
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
apt-get update
apt-get install -y apt-transport-https ca-certificates curl
curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
apt-get update
apt-get install -y kubelet=${kubernetes_community_ami_version}-00 kubeadm=${kubernetes_community_ami_version}-00 kubectl=${kubernetes_community_ami_version}-00
apt-mark hold kubelet kubeadm kubectl
# Bake ssh key auth
echo "${public_key}" >> /home/${user}/.ssh/authorized_keys
cat << EOF > /home/${user}/.ssh/cluster.key
${private_key}
EOF
cat << EOF > /home/${user}/.ssh/config
Host control-plane
    HostName 10.0.0.100
Host worker1
    HostName 10.0.0.10
Host worker2
    HostName 10.0.0.11
Host worker3
    HostName 10.0.0.12
Host *
    IdentityFile ~/.ssh/cluster.key
EOF
chown -R ${user}:${user} /home/${user}/.ssh/
chmod -R 600 /home/${user}/.ssh/*
chmod 755 /home/${user}/.ssh
cat >/tmp/kubeadm.yaml <<EOF
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: InitConfiguration
bootstrapTokens:
- groups:
  - "system:bootstrappers:kubeadm:default-node-token"
  token: "lv9h5t.dsk5x4o9tcznifkl"
  ttl: "0s"
  usages:
  - signing
  - authentication
nodeRegistration:
  name: "${hostname}"
  kubeletExtraArgs:
    cloud-provider: "gce"
---
apiVersion: kubeadm.k8s.io/v1beta3
kind: ClusterConfiguration
kubernetesVersion: "$kubernetes_community_ami_version"
apiServer:
  timeoutForControlPlane: 4m0s
  certSANs:
  - "10.0.0.100"
  extraArgs:
    cloud-provider: "gce"
    allow-privileged: "true"
    feature-gates: ""
clusterName: kubernetes
controlPlaneEndpoint: "10.0.0.100:6443"
controllerManager:
  extraArgs:
    cloud-provider: "gce"
    allocate-node-cidrs: "false"
networking:
  podSubnet: 192.168.0.0/16
---
apiVersion: kubelet.config.k8s.io/v1beta1
kind: KubeletConfiguration
cgroupDriver: systemd
featureGates: {}
EOF
# https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/create-cluster-kubeadm/
kubeadm config images pull
kubeadm init --config /tmp/kubeadm.yaml
export KUBECONFIG=/etc/kubernetes/admin.conf
# Grant the "admin" user complete access to the cluster
kubectl create clusterrolebinding admin-cluster-binding --clusterrole=cluster-admin --user=admin
kubectl apply -f https://clouda-labs-assets.s3-us-west-2.amazonaws.com/k8s-common/${kubernetes_minor_version}/scripts/calico.yaml
# Install the kubernetes dashboard by default
kubectl apply -f https://clouda-labs-assets.s3-us-west-2.amazonaws.com/k8s-common/${kubernetes_minor_version}/scripts/recommended.yaml
wget -O /tmp/metrics-server.zip https://github.com/cloudacademy/metrics-server/archive/${kubernetes_minor_version}.zip && \
sudo apt install -y unzip && \
unzip -q -d /tmp /tmp/metrics-server.zip && \
kubectl apply -f /tmp/metrics-server-${kubernetes_minor_version}/deploy/1.8+/
mkdir -p /home/${user}/.kube
cp -i /etc/kubernetes/admin.conf /home/${user}/.kube/config
chown -R ${user}:${user} /home/${user}/.kube
echo 'source <(kubectl completion bash)
alias k=kubectl
complete -F __start_kubectl k'  >> /home/${user}/.bashrc
chown -R ${user}:${user} /home/${user}/.bashrc
echo 'APT::Periodic::Enable "0";' > /etc/apt/apt.conf.d/10cloudinit-disable
apt-get -y purge update-notifier-common ubuntu-release-upgrader-core landscape-common unattended-upgrades
systemctl disable --now apt-daily.timer
systemctl disable --now apt-daily-upgrade.timer
# echo "Removed APT and Ubuntu garbage early" | systemd-cat
echo "ClientAliveInterval 60" >> /etc/ssh/sshd_config
echo "PrintLastLog no" >> /etc/ssh/sshd_config
systemctl restart sshd.service
rm -f /etc/update-motd.d/80-* /etc/update-motd.d/50-motd-news
echo '#!/bin/sh' > /etc/update-motd.d/89-motd-ca
echo 'printf "\nWelcome to the CKS environment\n"' >> /etc/update-motd.d/89-motd-ca
chmod a+x /etc/update-motd.d/89-motd-ca
cat <<EOF > /etc/vim/vimrc.local
" Yaml file handling
autocmd FileType yaml,yml setlocal ts=2 sts=2 sw=2 expandtab
filetype plugin indent on
autocmd FileType yaml,yml setl indentkeys-=<:>
" Copy paste with ctr+c, ctr+v, etc
:behave mswin
:set clipboard=unnamedplus
:smap <Del> <C-g>"_d
:smap <C-c> <C-g>y
:smap <C-x> <C-g>x
:imap <C-v> <Esc>pi
:smap <C-v> <C-g>p
:smap <Tab> <C-g>1>
:smap <S-Tab> <C-g>1<
:set paste
EOF

gcloud beta runtime-config configs variables set join-command "$(kubeadm token create --print-join-command)" --config-name k8s-config --is-text